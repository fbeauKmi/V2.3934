
## adaptive Heat soak
# version: 2.0.7
# changelog :
#   -V 1.0 : adaptive bed soak initial release
#   -V 2.0 : adaptive heatsoak for bed, chamber, extruder, Async mode only (can be use only while Printing)
#   -V 2.0.1 : Fix while temperature > target + 2°, add default timeout 30min for heater (avoid interrupt during heating)
#   -V 2.0.2 : allow standalone mode
#   -V 2.0.3 : Fix issues "Must home first" and "unpredictables moves"
#   -V 2.0.4 : Fix "Sequence doesn't reset at startup"
#   -V 2.0.5 : Add OUTPUT_GCODE
#   -V 2.0.6 : Use print_stats instead of virtual_sdcard
#   -V 2.0.7 : add TIMEOUT per sequence

# !WARNING! Even in standalone mode you cannot use HEATSOAK inside a macro. It uses Resume/Pause/Delayed_gcode mecanisms
# and yields unpredictable behavior

# Note :
# These macros intents to set heaters target to adapt heatsoak of 3D printer and use bed power stability to 
# determine best soak duration. It was tested on a Voron 2.4 300 mm printer

# Installation :
#  copy heatsoak.cfg in your config folder, add an include [include <YOUR_PATH/heatsoak.cfg] in
#  your printer.cfg
#  In order to benefit of the async mod you can use HEATSOAK_NEXT/HEATSOAK_CANCEL macros or 
#  modify/override RESUME / CANCEL_PRINT macros
# RESUME and CANCEL could be like this

#  [gcode_macro RESUME]
#  rename_existing: RESUME_BASE
#  gcode:
#    {% if printer.pause_resume.is_paused %}
#     {% if printer['gcode_macro HEATSOAK'].soak_pending %}
#      HEATSOAK_NEXT
#     {% else %}
#      ... YOUR CODE HERE ...
#      RESUME_BASE
#     {% endif %}
#    {% endif %}

#  [gcode_macro CANCEL_PRINT]
#  rename_existing: CANCEL_BASE
#  gcode:
#     HEATSOAK_CANCEL
#     ... YOUR CODE HERE ...
#     CANCEL_BASE

# Usage:
# WARNING : HEATSOAK MUST NOT BE INCLUDED IN PRINT_START MACRO
# As it uses PAUSE/RESUME sequence it would yield to unpredictible behavior if included in start_print
# Your slicer start_gcode should be like this
#   HEATSOAK <sequence_name>=<target_temp> <sequence_name>_TIMEOUT=<duration in min> TIMEOUT=<duration in min> OUTPUT_GCODE=<GCODE_MACRO>

# e.g Superslicer
#   HEATSOAK BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]-40} CHAMBER_TEMP=[chamber_temperature]
#   PRINT_START <YOUR_STUFF>

#  If you need some actions to be done before heatsoak put its in another macro
# e.g.
#    PREFLY
#    HEATSOAK <blahblahblah>
#    PRINT_START <blahblahblah>

#  OUTPUT_GCODE can be added as parameter. The template will be call at the end of HEATSOAK
# e.g.
#    HEATSOAK <blahblahblah> OUTPUT_GCODE=CASELIGHT_ON

# The Heatsoak sequence is defined in _HS_VARIABLES macro (see example below)
# each sequence entry must contain a type (temp, pwm, timer) and a sensor name (e.g. heater_bed, extruder, temperature_sensor chamber)
# It may also contain an offset_temp (a temp offset to trigger after/before the target) and timeout and target
# ! IMPORTANT ! : Set the sensor values according to your printer configuration

# The order of sequence can be changed or removed but setting bed_power before bed_temp could be funny XD
# available sequence items type:
#   temp : set heater target temperature and wait to reach it(heater only) / wait to reach target temperature 
#   pwm : wait for PWM statbility (Experimental)
#   timer : wait for X minutes
# Item can be used only once

# hs_sequence
[gcode_macro _HS_VARIABLES]
#Sequence table: item parameters are 
# 'type' = temp, pwm, timer (required)
# 'sensor' = temperature sensor ref (required)
# 'offset_temp' = the offset temperature +/- that trigger
# 'timeout' = max time to wait, default 0, 30min for heaters
# 'target' = target (minutes or temperature °C )
variable_hs_allow_standalone: True  #To manually use HEATSOAK
variable_hs_sequence: {
                    'bed_temp':{'type': 'temp','sensor': 'heater_bed', 'offset_temp': 1, 'timeout': 30 },
                    'bed_power':{'type': 'pwm','sensor': 'heater_bed'},
                    'chamber_temp':{'type': 'temp','sensor': 'temperature_sensor chamber'},
                    'extruder_temp':{'type': 'temp','sensor': 'extruder', 'timeout' : 30 }
                    }
variable_verbose: True
gcode:

[gcode_macro HEATSOAK]
description: Printer warmup sequence
variable_interval: 0.5
variable_soak_pending: False
variable_soak:  {'current_seq': 0,
                'reached' : False,
                'end_gcode': '' }
variable_current_timer: 0
variable_total_timer:0
variable_sequence: {}
gcode:
    {% set _uv = printer['gcode_macro _HS_VARIABLES'] %}
    {% set _= soak.update({'timeout' : params.TIMEOUT|default(30)|int }) %} #Timeout can be set in Params Entries or hs_sequence object, default 30 min
    {% set is_printing = printer.print_stats.state in ["printing","paused"] %}

    {% if not soak_pending %}
        {% if is_printing or _uv.hs_allow_standalone %}           
            # Init sequence and update target from entry params (e.g. HEATSOAK BED_TEMP=80 gives sequence.bed_temp.target=80)
            {% set _= soak.update({'current_seq': 'start',
                                    'reached': True,
                                    'end_gcode': params.OUTPUT_GCODE|default('')}) %}
            {% set _= sequence.clear() %}
            {% set _= sequence.update(_uv.hs_sequence.copy()) %}
            {% for param in sequence %}
                {% set _= sequence[param].update({
                    'target' : params[param|upper]
                                |default(sequence[param].target)
                                |default(0)|float,
                    'timeout' : params["%s_TIMEOUT" % param|upper]
                                |default(sequence[param].timeout)
                                |default(soak.timeout)|int,
                    }) %}
            {% endfor %}

            # Set idle timeout according sequence timeouts.
            SET_IDLE_TIMEOUT TIMEOUT={(sequence.values()|sum(attribute='timeout')*60,printer.configfile.settings.idle_timeout.timeout)|max }

            # Start Heat soak sequence
            SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=True #HEATSOAK status, prevent to call it twice
            UPDATE_DELAYED_GCODE ID=_HEATSOAK_CLOCK DURATION=1  #Start timer. it runs as long as soak_pending=true
        
            _HS_RESPOND MSG="Entering heatsoak !" 

            {% if is_printing %} 
                # from gcode file: 
                _HS_RESPOND MSG="Use HEATSOAK_NEXT / HEATSOAK_CANCEL or RESUME to interact"

                G4 P1800 # Wait before pausing to let Moonraker catch printing status FIXED : 10/03/2022
                M400     # Fix to avoid klipper overload
                
                {% if printer.configfile.settings['gcode_macro pause'] is defined %}
                    {printer.configfile.settings['gcode_macro pause'].rename_existing }
                {% else %}
                    PAUSE
                {% endif %}
                
                _HEATSOAK_INTERRUPT # initiate "LOOP"   
            {% else %}
                # from macro: Advertise SA mode !
                _HS_RESPOND MSG="!WARNING! HEATSOAK run in standalone mode\\nuse HEATSOAK_NEXT / HEATSOAK_CANCEL to interact\\n IT CANNOT BE USED INSIDE A MACRO"
                _HEATSOAK_INTERRUPT # initiate "LOOP"
            {% endif %}

            

        {% elif not _uv.hs_allow_standalone %}
            # from macro: throw error
            {action_raise_error("HEATSOAK is not allowed in standalone mode")}
        {% endif %}
    {% endif %}

# Wait bed reach target temperature (Async, can be interrupt)
[delayed_gcode _HEATSOAK_CHECK]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% set _hs_seq = _hs.sequence[_hs.soak.current_seq] %}

    {% if _hs.soak_pending %}
        {% if (printer.print_stats.state in ["printing","paused"] and not printer.pause_resume.is_paused) %}
            HEATSOAK_CANCEL
        {% elif _hs.soak.reached %}
            _HEATSOAK_INTERRUPT
        {% else %}
            UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION={_hs.interval}
            {% if printer['gcode_macro _' + _hs_seq.type ] is defined %}
            _{ _hs_seq.type }   
            {% else %}
                { action_raise_error('_%s does not exist' % (_hs_seq.type)) }
            {% endif %}
        {% endif %}
    {% endif %}

[delayed_gcode _HEATSOAK_TIMEOUT]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
    _HS_RESPOND MSG="{ "%s interrupt after %smin %ss" % (_hs.soak.current_seq,(_hs.current_timer/60)|int,(_hs.current_timer%60)|int) }"
    HEATSOAK_NEXT
    {% endif %}

# Heatsoak next item in sequence
[gcode_macro HEATSOAK_NEXT]
description: Skip current item in sequence
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE={_hs.total_timer + _hs.current_timer}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
        SET_GCODE_VARIABLE MACRO=_RESPOND_DELAYED VARIABLE=msg VALUE=0
        #_RESPOND MSG="{ "%s : %smin %ss" % (_hs.soak.current_seq,(_hs.current_timer/60)|int,(_hs.current_timer%60)|int) }"
        
        {% set _=  _hs.soak.update({'reached': True}) %}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    {% endif %}
    
#  Heatsoak wait interruption (async)
[gcode_macro _HEATSOAK_INTERRUPT]
gcode:

    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}

        UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0 #Cancel timeout action
        {% for seq in _hs.sequence %}
            {% if _hs.soak.reached %} #Check if soak is reached to avoid misscall
                {% if seq == _hs.soak.current_seq or _hs.soak.current_seq == 'start' %}
                
                # Exit Heatsoak : Last item target reached 
                    {% if loop.last and _hs.soak.current_seq != 'start'%}
                        
                        _HS_RESPOND MSG="{"HEATSOAK Total duration : %smin %ss" % (((_hs.total_timer)/60)|int,((_hs.total_timer)%60)|int) }"

                        {_hs.soak.end_gcode}
                        {% if printer.pause_resume.is_paused %}
                            # Use Klipper resume command
                            SAVE_GCODE_STATE NAME=PAUSE_STATE # reset gcode state before resuming
                            M400
                            G4 P200
                            {% if printer.configfile.settings['gcode_macro resume'] is defined %}
                                {printer.configfile.settings['gcode_macro resume'].rename_existing }
                            {% else %}
                                RESUME
                            {% endif %}
                        {% endif %}
                        #Reset parameters
                        HEATSOAK_CANCEL

                # Continue Heatsoak : previous item target reached    
                    {% else %}
                        # Set next sequence
                        {% set _= _hs.soak.update({'current_seq' : seq if _hs.soak.current_seq == 'start' else loop.nextitem, 'reached': False}) %}
                        {% set current_seq = _hs.sequence[_hs.soak.current_seq] %}

                        # Reset current sequence
                        {% if printer['gcode_macro _' + current_seq.type + '_reset'] is defined %}
                            _{current_seq.type}_reset seq={_hs.soak.current_seq}
                        {% endif %}
                        {% if current_seq.type == 'timer' %}
                            _HS_RESPOND MSG='HEATSOAK: `{_hs.soak.current_seq}` timer: {current_seq.target} min'
                        {% elif current_seq.type == 'temp' %}
                            _HS_RESPOND MSG='HEATSOAK: `{_hs.soak.current_seq}` target: {current_seq.target|default(_hs.soak.target)}°C, timeout: {current_seq.timeout|default(_hs.soak.timeout)} min'
                        {% elif current_seq.type == 'pwm' %}
                            _HS_RESPOND MSG='HEATSOAK: `{_hs.soak.current_seq}` check pwm, timeout: {current_seq.timeout|default(_hs.soak.timeout)} min'
                        {% endif %}
                        
                        UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={current_seq.timeout|default(_hs.soak.timeout)*60 + 0.1}  # Set Timeout

                    {% endif %} 
                {% endif %}
            {% endif %}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    {% endif %}

# Cancel heatsoak (async only)
[gcode_macro HEATSOAK_CANCEL]
description: Cancel Heatsoak
gcode:
    
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=False
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_CLOCK DURATION=0
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    {% if printer['gcode_macro HEATSOAK'].soak_pending %}
    _HS_RESPOND MSG="End of Heatsoak !"
    {% endif %}

#Set heater temperature/wait temp
[gcode_macro _temp]
variable_startup_value : 0
gcode:

    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
        {% set _hs_seq = _hs.sequence[_hs.soak.current_seq] %}
        
        # if heater detected set temperature
        {% if printer[_hs_seq.sensor].target is defined %}
            {% if printer[_hs_seq.sensor].target != _hs_seq.target and _hs_seq.target != 0 %}
                SET_HEATER_TEMPERATURE HEATER='{_hs_seq.sensor}' TARGET={_hs_seq.target}
            {% endif %}
        {% endif %}

        # check if temperature if reached
        {% if printer[_hs_seq.sensor].temperature < (_hs_seq.target|default(0)|int - _hs_seq.offset_temp|default(0)|int) 
            or (printer[_hs_seq.sensor].temperature > (_hs_seq.target|default(0)|int + _hs_seq.offset_temp|default(0)|int) + 1 
            and printer[_hs_seq.sensor].target is defined and _hs_seq.target|default(0)|int != 0 ) %}
            _RESPOND_DELAYED MSG="{_hs.soak.current_seq}/target {printer[_hs_seq.sensor].temperature}°C/{_hs_seq.target}°C"
        {% else %}
            _HS_RESPOND MSG="{_hs.soak.current_seq} reached from {startup_value}°C to  {printer[_hs_seq.sensor].temperature}°C in {"%smin%ss" % ((_hs.current_timer/60)|int,(_hs.current_timer%60)|int)}"
            HEATSOAK_NEXT
        {% endif %}
    {% endif %}

# reset temp variables
[gcode_macro _temp_reset]
gcode:
    {% set _hs_seq = printer['gcode_macro HEATSOAK'].sequence[params.SEQ] %}
    SET_GCODE_VARIABLE MACRO=_temp VARIABLE=startup_value VALUE={printer[_hs_seq.sensor].temperature}


# Compute smoothed quadratic derivative of pwm
# based on Savitzky-Golay algorithm
[gcode_macro _pwm]
variable_buffer: []   #stored power values
variable_d: {'val': 100,'stable': 0,'stable_value':0}
gcode:

    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% if _hs.soak_pending %}
        {% set _hs_seq = _hs.sequence[_hs.soak.current_seq] %}

        # Populate buffer
        {% set pow= printer[_hs_seq.sensor].power|float %}
        {% set _= buffer.append(pow) %}
        {% if buffer|length > 125 %}  #max_vals
            {% set _= buffer.pop(0) %}
        {% endif %}

        {% if buffer|length > 15 %}  #min_vals
            {% set _=d.update({'val':0}) %}
        # normalize sample (size should be odd number)
            {% set half_window = ((buffer|length -1 )/2)|int %}
            {% set window_size = half_window*2 +1 %}
            {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for even
            {% set norm = (window_size -1 ) * window_size * (window_size + 1) * printer['gcode_macro HEATSOAK'].interval %}  # Normalization factor

        # Compute Smoothed Quadratic derivative of center value
            {% for i in range(window_size) %}
                {% set _=d.update({'val':0 + d.val + buffer[i + inc]*(i-half_window)/norm}) %}
            {% endfor %}

            _RESPOND_DELAYED MSG="{_hs.soak.current_seq} variation {"%.2f" % (d.val*6000)}%/min, nb of samples: {window_size}" 
        {%endif %}
        
        # Test if stability is reached (4 times under "stability")
        {% if d.val|abs < 7E-6 %} #stability
            {% set _= d.update({'stable': (d.stable + 1), 'stable_value': (d.stable_value*d.stable + d.val|abs )/( d.stable + 1 )}) %}
            {% if d.stable > 3 %} #stability_times          
                _HS_RESPOND MSG="{_hs.soak.current_seq} stabilized {"%.2f" % (d.stable_value*6000)}%/min in {"%smin%ss" % ((_hs.current_timer/60)|int,(_hs.current_timer%60)|int)}"
                #reset stabilized sample count
                {% set _= d.update({'stable': 0, 'stable_value' : 0 }) %}
                HEATSOAK_NEXT
            {% endif %}
        {% else %}
            #reset stabilized sample count
            {% set _=d.update({'stable': 0, 'stable_value' : 0 }) %}
        {% endif %}   
    {% endif %}

# reset _pwm variables
[gcode_macro _pwm_reset]
gcode:
    SET_GCODE_VARIABLE MACRO=_pwm VARIABLE=buffer VALUE='[]'
    SET_GCODE_VARIABLE MACRO=_pwm VARIABLE=d VALUE='{ {'val': 100, 'duration': 0, 'stable': 0}|tojson|string }'

[gcode_macro _timer]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    {% set _hs_seq = _hs.sequence[_hs.soak.current_seq] %}
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={_hs_seq.target*60}

[gcode_macro _HS_RESPOND]
description: Helper:Display message in console (verbose mode)
gcode:
    {% set verbose = (params.VERBOSE|lower == 'true') | default(False) %}
    {% if not verbose or printer['gcode_macro _HS_VARIABLES'].verbose %}
        {action_respond_info(params.MSG | default("") | replace('\\n','\n'))}
    {% endif %}

[gcode_macro _RESPOND_DELAYED]
variable_msg : 0
gcode:
    SET_GCODE_VARIABLE MACRO=_RESPOND_DELAYED VARIABLE=msg VALUE='"{params.MSG}"'

# Heatsoak Timer
[delayed_gcode _HEATSOAK_CLOCK]
gcode:
    {% set _hs = printer['gcode_macro HEATSOAK'] %}
    SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE={_hs.current_timer|int + 1 }
    {% if _hs.soak_pending %}
        UPDATE_DELAYED_GCODE ID=_HEATSOAK_CLOCK DURATION=1
        {% if _hs.current_timer|int % 10 == 0 and printer['gcode_macro _RESPOND_DELAYED'].msg != 0 %}
            _HS_RESPOND VERBOSE=True MSG="{printer['gcode_macro _RESPOND_DELAYED'].msg}"
            SET_GCODE_VARIABLE MACRO=_RESPOND_DELAYED VARIABLE=msg VALUE=0
        {% endif %}
    {% endif %}
